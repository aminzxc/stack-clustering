version: "3.7"

# https://docs.docker.com/compose/compose-file/#long-syntax-3
# https://docs.confluent.io/current/installation/docker/docs/operations/external-volumes.html#data-volumes-for-kafka-zookeeper
volumes:
  zookeeper1-data:
  zookeeper1-txn-logs:
  zookeeper2-data:
  zookeeper2-txn-logs:
  kafka1-data:
  kafka2-data:

services:

  zookeeper1:
    hostname: zookeeper1
    image: docker.arvancloud.ir/confluentinc/cp-zookeeper:latest
    user: "0:0"
    environment:
        - ZOOKEEPER_SERVER_ID=1
        - ZOOKEEPER_CLIENT_PORT=22181
        - ZOOKEEPER_TICK_TIME=2000
        - ZOOKEEPER_INIT_LIMIT=5
        - ZOOKEEPER_SYNC_LIMIT=2
        # These ports are for peer to peer communications
        - ZOOKEEPER_SERVERS=0.0.0.0:22888:23888;192.168.56.113:32888:33888
    ports:
      - "22181:22181"
      - "22888:22888"
      - "23888:23888"
    volumes:
      - type: "volume"
        source: "zookeeper1-data"
        target: "/var/lib/zookeeper/data"
        volume:
          nocopy: true
      - type: "volume"
        source: "zookeeper1-txn-logs"
        target: "/var/lib/zookeeper/log"
        volume:
          nocopy: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.replica == 1

    networks:
      - kafka_network



  zookeeper2:
    hostname: zookeeper2
    image: docker.arvancloud.ir/confluentinc/cp-zookeeper:latest
    user: "0:0"
    environment:
        - ZOOKEEPER_SERVER_ID=2
        - ZOOKEEPER_CLIENT_PORT=32181
        - ZOOKEEPER_TICK_TIME=2000
        - ZOOKEEPER_INIT_LIMIT=5
        - ZOOKEEPER_SYNC_LIMIT=2
        # These ports are for peer to peer communications
        - ZOOKEEPER_SERVERS=192.168.56.112:22888:23888;0.0.0.0:32888:33888
    ports:
      - "32181:32181"
      - "32888:32888"
      - "33888:33888"
    volumes:
      - type: "volume"
        source: "zookeeper2-data"
        target: "/var/lib/zookeeper/data"
        volume:
          nocopy: true
      - type: "volume"
        source: "zookeeper2-txn-logs"
        target: "/var/lib/zookeeper/log"
        volume:
          nocopy: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.mongo.replica == 2

    networks:
      - kafka_network



  kafka1:
    hostname: kafka1
    image: docker.arvancloud.ir/confluentinc/cp-kafka:latest
    user: "0:0"
    ports:
     - 19092:19092
    volumes:
      - type: "volume"
        source: "kafka1-data"
        target: "/var/lib/kafka/data"
        volume:
          nocopy: true
    depends_on:
      - zookeeper1
      - zookeeper2
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 192.168.56.112:22181,192.168.56.113:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.56.113:19092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    deploy:
      placement:
        constraints:
          - node.labels.mongo.replica == 1

    networks:
      - kafka_network





  kafka2:
    hostname: kafka2
    image: docker.arvancloud.ir/confluentinc/cp-kafka:latest
    user: "0:0"
    ports:
     - 29092:29092
    volumes:
      - type: "volume"
        source: "kafka2-data"
        target: "/var/lib/kafka/data"
        volume:
          nocopy: true
    depends_on:
      - zookeeper1
      - zookeeper2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 192.168.56.112:22181,192.168.56.113:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.56.112:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    deploy:
      placement:
        constraints:
          - node.labels.mongo.replica == 2

    networks:
      - kafka_network



  kafka-manager:
    image: docker.arvancloud.ir/sheepkiller/kafka-manager:latest
    ports:
      - "9000:9000"
    links:
      - zookeeper1
      - zookeeper2
      - kafka1
      - kafka2
    environment:
      ZK_HOSTS: 192.168.56.112:22181,192.168.56.113:32181
      APPLICATION_SECRET: letmein
      KAFKA_MANAGER_AUTH_ENABLED: "false"
      KM_ARGS: -Djava.net.preferIPv4Stack=true
      KAFKA_VERSION: "3.6.0"
    deploy:
      placement:
        constraints:
          - node.labels.mongo.replica == 1

    networks:
      - kafka_network




networks:
  kafka_network:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"

